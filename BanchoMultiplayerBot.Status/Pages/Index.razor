@page "/"
@using BanchoMultiplayerBot.Status.Data
@using BanchoMultiplayerBot.Host.Web.Statistics
@using BanchoMultiplayerBot.Database.Status.Repositories
@using BanchoMultiplayerBot.Database.Status.Models
@using Color = ApexCharts.Color
@inject StatisticsManagerService StatisticsManagerService;
@inject DbBotDataService DataService;

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">General</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudTooltip Text="Not implemented yet.">
                    <MudText Typo="Typo.body2">Up time</MudText>
                    <MudText Typo="Typo.h4" Color="@(_upTime >= 99 ? MudBlazor.Color.Success : MudBlazor.Color.Error)">@_upTime%</MudText>
                </MudTooltip>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Messages sent (past minute)</MudText>
                <MudText Typo="Typo.h4">@DataService.Data.Where(x => x.Time >= _pastMinute).Sum(x => x.MessagesSent)</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Messages received (past minute)</MudText>
                <MudText Typo="Typo.h4">@DataService.Data.Where(x => x.Time >= _pastMinute).Sum(x => x.MessagesReceived)</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">osu! API success rate</MudText>
                <MudText Typo="Typo.h4">@(_pastHourData.Any() ? RatioToPercentage(_pastHourData.Sum(x => x.ApiErrorCount), _pastHourData.Sum(x => x.ApiLookups)).ToString("0.###") : "N/A")%</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Performance point success rate</MudText>
                <MudText Typo="Typo.h4">@(_pastHourData.Any() ? RatioToPercentage(_pastHourData.Sum(x => x.PerformancePointCalculationErrors), _pastHourData.Sum(x => x.PerformancePointCalculations)).ToString("0.###") : "N/A")%</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Message error rate</MudText>
                <MudText Typo="Typo.h4">@((_pastHourData.Any() ? RatioToPercentage(_pastHourData.Sum(x => x.MessagesSent), _pastHourData.Sum(x => x.MessageErrorCount)).ToString("0.###") : "N/A"))%</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <ApexChart TItem="BotSnapshot" Title="Total Players"
                           XAxisType="XAxisType.Datetime"
                           Options="_chartOptions">

                    <ApexPointSeries TItem="BotSnapshot"
                                     Items="DataService.Data"
                                     Name="Player Count"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.Time)"
                                     YAggregate="@(e => e.Sum(e => e.LobbySnapshots.Sum(lobby => lobby.Players)))"
                                     OrderBy="e=>e.X" />
                </ApexChart>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Average players (past hour)</MudText>
                <MudText Typo="Typo.h4">@(_pastHourData.Any() ? _pastHourData.Average(x => x.LobbySnapshots.Sum(y => y.Players)).ToString("0.##") : "N/A")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>



@code
{
    private int _upTime;

    private readonly DateTime _pastMinute = DateTime.Now - TimeSpan.FromMinutes(1);
    private readonly DateTime _pastHour = DateTime.Now - TimeSpan.FromMinutes(1);

    private List<BotSnapshot>? _pastHourData;

    private ApexChartOptions<BotSnapshot> _chartOptions;

    protected override async void OnInitialized()
    {
        await DataService.RetrieveData();

        _pastHourData = DataService.Data?.Where(x => x.Time >= _pastHour).ToList();
        _upTime = 100; // todo: lol.

        _chartOptions = new ApexChartOptions<BotSnapshot>
        {
            Theme = new Theme
            {
                Mode = Mode.Dark,
                Palette = PaletteType.Palette1
            },
            Stroke = new Stroke()
            {
                Width = 3,
            },
            Chart = new Chart()
            {
                Background = "#00000000"
            }
        };
    }


    // Also takes cares of cases where it otherwise divides by 0
    private double RatioToPercentage(int a, int b)
    {
        if (b == 0) return 0.0;

        return 100.0 - (double)a / (double)b;
    }
}
