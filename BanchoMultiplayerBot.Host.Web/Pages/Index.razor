@implements IDisposable
@inject BotService Bot
@inject IHostApplicationLifetime ApplicationLifetime
@inject IDialogService DialogService
@page "/"
@using BanchoMultiplayerBot
@using BanchoMultiplayerBot.Config
@using System.Threading
@using BanchoMultiplayerBot.Host.Web.Log
@using MudBlazor.Utilities
@using Serilog.Events

<PageTitle>Dashboard</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Dashboard</MudText>

@if (_showConnectionStatus)
{
    <MudAlert Severity="@(_connectionStatusError ? Severity.Error : Severity.Success)" ShowCloseIcon="true" CloseIconClicked="(() => _showConnectionStatus = false)">@_connectionStatusText</MudAlert>
}

<MudGrid Justify="Justify.FlexStart" Class="mt-2">
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Bancho Connection</MudText>
                <MudText Typo="Typo.h4" Color="@(_isConnected ? Color.Success : Color.Error)">@(_isConnected ? "OK" : "Error")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Lobbies</MudText>
                <MudText Typo="Typo.h4">@_lobbyCount@(Bot.Configuration.IsBotAccount == true ? "" : "/4")</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Players</MudText>
                <MudText Typo="Typo.h4">@_playerCount/@_maxPlayerCount</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="3">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">Games Played</MudText>
                <MudText Typo="Typo.h4">@_gamesPlayed</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudPaper Class="pa-4 mt-4">
    <MudPaper Height="440px" Elevation="0">
            <MudPaper Class="pa-2 ma-0" MaxHeight="440px" Style="overflow: auto;display: flex;flex-direction: column-reverse;" Elevation="0">
                @foreach (var log in DashboardLogSink.Logs)
                {
                    <MudPaper Class="d-flex flex-row flex-grow-1 gap-1" Elevation="0">
                        <MudText Typo="Typo.body2" Color="GetLogTextColor(log.Item2)">@log.Item1</MudText>
                    </MudPaper>
                }
            </MudPaper>
        </MudPaper>
</MudPaper>

<MudPaper Class="pa-4 mt-4">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="ConnectToBancho" Disabled="@(_isConnecting || !Bot.HasValidConfiguration() || _isConnected)">
        @if (_isConnecting)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Connecting</MudText>
        }
        else
        {
            <MudText>Connect</MudText>
        }
    </MudButton>

    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="SaveConfig">Save Configuration</MudButton>

    <MudButton Color="Color.Error" Variant="Variant.Outlined" @onclick="TerminateBot">Exit</MudButton>
</MudPaper>


@code {
    // Stats that are displayed in the dashboard
    private int _lobbyCount = 0;
    private int _playerCount = 0;
    private int _maxPlayerCount = 0;
    private int _gamesPlayed = 0;
    private bool _isConnected = false;

    // Manages the connect button
    private bool _isConnecting = false;

    // If an alert should be shown at the top of the page
    private bool _showConnectionStatus = false;
    private bool _connectionStatusError = false;
    private string _connectionStatusText = "";

    // Runs the page's automatic update, every 5 seconds.
    readonly PeriodicTimer _updateTimer = new(TimeSpan.FromSeconds(5));

    private Color GetLogTextColor(LogEventLevel level)
    {
        return level switch
        {
            LogEventLevel.Debug => Color.Dark,
            LogEventLevel.Verbose => Color.Dark,
            LogEventLevel.Information => Color.Default,
            LogEventLevel.Warning => Color.Warning,
            LogEventLevel.Error => Color.Error,
            _ => Color.Default
        };
    }

    private async void UpdateStatistics()
    {
        do
        {
            _lobbyCount = Bot.Lobbies.Count;
            _playerCount = 0;
            _maxPlayerCount = 0;
            _gamesPlayed = 0;

            Bot.Lobbies.ForEach(x => _playerCount += x.MultiplayerLobby.Players.Count);
            Bot.Lobbies.ForEach(x => _maxPlayerCount += (x.Configuration.Size.HasValue == true ? x.Configuration.Size.Value : 0));
            Bot.Lobbies.ForEach(x => _gamesPlayed += x.GamesPlayed);

            UpdateBanchoConnection();

            StateHasChanged();
        }
        while (await _updateTimer.WaitForNextTickAsync());
    }

    private async void UpdateBanchoConnection()
    {
        await InvokeAsync(() =>
        { 
            _isConnected = Bot.Client.IsConnected && Bot.Client.IsAuthenticated;

            if (_isConnected)
                _isConnecting = false;

            StateHasChanged();
        }).ConfigureAwait(false);
    }

    protected override void OnInitialized()
    {
        // Register callbacks
        Bot.Client.OnConnected += UpdateBanchoConnection;
        Bot.Client.OnAuthenticated += UpdateBanchoConnection;
        Bot.Client.OnDisconnected += UpdateBanchoConnection;

        // Fill out initial information
        UpdateStatistics();
        UpdateBanchoConnection();

        // Make sure to warn the user about an incorrect configuration
        if (Bot.HasValidConfiguration()) return;

        _showConnectionStatus = true;
        _connectionStatusError = true;
        _connectionStatusText = "Configuration is invalid";
    }

    public void Dispose()
    {
        // Remove callbacks
        Bot.Client.OnConnected -= UpdateBanchoConnection;
        Bot.Client.OnAuthenticated -= UpdateBanchoConnection;
        Bot.Client.OnDisconnected -= UpdateBanchoConnection;

        // Stop the update timer
        _updateTimer.Dispose();
    }

    private void ConnectToBancho()
    {
        _isConnecting = true;

        Bot.SaveConfiguration();
        Bot.Start();
    }

    private async void TerminateBot()
    {
        var parameters = new DialogParameters { ["Message"] = "Are you sure you want to exit the bot?" };

        var dialog = DialogService.Show<ConfirmDialog>("ConfirmDialog", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;
        
        await Bot.DisconnectAsync();

        ApplicationLifetime.StopApplication();
    }

    private void SaveConfig()
    {
        Bot.SaveBotState();
    }
}