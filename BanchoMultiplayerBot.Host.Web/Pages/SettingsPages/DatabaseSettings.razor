@implements IDisposable
@inject BotService Bot
@inject IDialogService DialogService
@page "/settings/database"
@using BanchoMultiplayerBot
@using BanchoMultiplayerBot.Config
@using BanchoMultiplayerBot.Data
@using BanchoMultiplayerBot.Database
@using BanchoMultiplayerBot.Database.Models
@using BanchoMultiplayerBot.Database.Repositories
@using Microsoft.EntityFrameworkCore
@using Serilog

<PageTitle>Database Settings</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Database</MudText>

<MudForm @ref="_form">
    <MudGrid>
        <MudItem xs="6">
            <MudPaper Class="pa-8 ma-2">
                <MudText Typo="Typo.h6" GutterBottom="true">General</MudText>
                <MudText>Number of Users: @_userCount</MudText>
                <MudText>Number of Games Played: @_gamesCount</MudText>
                <MudText>Number of Scores: @_scoreCount</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-8 ma-2">
                <MudText Typo="Typo.h6" GutterBottom="true">Maintenance</MudText>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="FixGamesTable">Fix Games table</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="RemoveMaps">Remove Maps</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="LoadMaps">Load Maps</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="ProcessMapsTimesPlayed">ProcessMapsTimesPlayed</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="ProcessMapsPassRatio">ProcessMapsPassRatio</MudButton>
                <MudButton Color="Color.Default" Variant="Variant.Outlined" @onclick="ProcessMapsLeaveRatio">ProcessMapsLeaveRatio</MudButton>
                </MudPaper>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private MudForm? _form;
    private BotConfiguration _configuration = null!;

    private int _userCount = 0;
    private int _gamesCount = 0;
    private long _scoreCount = 0;

    private void CleanUsers()
    {
        // TODO: Figure out some strategy to remove unneeded stuff.
    }

    private static async void FixGamesTable()
    {
        await using var dbContext = new BotDbContext();

        var affectedRows = 0;
        
        affectedRows += await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM Games WHERE PlayerFinishCount > 16;");
        affectedRows += await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM Games WHERE Time = '0';");

        Log.Information($"Removed {affectedRows} faulty rows from Games table.");
    }

    private static async void RemoveMaps()
    {
        await using var dbContext = new BotDbContext();

        var affectedRows = 0;
        
        affectedRows += await dbContext.Database.ExecuteSqlRawAsync("DELETE FROM Maps;");

        Log.Information($"Removed {affectedRows} rows from Maps table.");
    }

    private static async void ProcessMapsTimesPlayed()
    {
        const int batchCount = 500;
        var totalRows = 0;

        {
            await using var dbContext = new BotDbContext();

            totalRows = await dbContext.Maps.CountAsync();
        }

        var batchesRequired = (int)Math.Ceiling((double)totalRows / batchCount);
        var affectedRows = 0;
        
        for (var i = 0; i < batchesRequired; i++)
        {
            await using var dbContext = new BotDbContext();

            affectedRows += await dbContext.Database.ExecuteSqlRawAsync($"UPDATE Maps SET TimesPlayed = (SELECT COUNT(*) FROM Games WHERE Games.BeatmapId = Maps.BeatmapId) WHERE BeatmapId IN (SELECT BeatmapId FROM Maps LIMIT {batchCount} OFFSET {batchCount * i});");
            
            Log.Information($"Updating TimesPlayed {i * batchCount}/{totalRows}...");
            
            await Task.Delay(500);
        }
        
        Log.Information($"Updated TimesPlayed on {affectedRows} rows.");
    }
    
    private static async void ProcessMapsPassRatio()
    {
        const int batchCount = 500;
        var totalRows = 0;

        {
            await using var dbContext = new BotDbContext();

            totalRows = await dbContext.Maps.CountAsync();

            await dbContext.Database.ExecuteSqlRawAsync("UPDATE Maps SET AveragePassPercentage = -1;");
        }

        var batchesRequired = (int)Math.Ceiling((double)totalRows / batchCount);
        var affectedRows = 0;
        
        for (var i = 0; i < batchesRequired; i++)
        {
            await using var dbContext = new BotDbContext();
            
            affectedRows += await dbContext.Database.ExecuteSqlRawAsync($"UPDATE Maps SET AveragePassPercentage = (SELECT AVG(PlayerPassedCount * 1.0 / PlayerFinishCount) FROM Games WHERE Games.BeatmapId = Maps.BeatmapId AND PlayerPassedCount != -1 AND PlayerCount > 3 ORDER BY Games.Time DESC LIMIT 20) WHERE BeatmapId IN (SELECT DISTINCT BeatmapId FROM Games WHERE PlayerPassedCount != -1 AND PlayerCount > 3 GROUP BY BeatmapId HAVING COUNT(*) >= 5 ORDER BY MAX(Time) DESC LIMIT {batchCount} OFFSET {batchCount * i});");
            
            Log.Information($"Updating AveragePassPercentage {i * batchCount}/{totalRows}...");
            
            await Task.Delay(500);
        }
        
        Log.Information($"Updated AveragePassPercentage on {affectedRows} rows.");
    }
    
    private static async void ProcessMapsLeaveRatio()
    {
        const int batchCount = 500;
        var totalRows = 0;

        {
            await using var dbContext = new BotDbContext();

            totalRows = await dbContext.Maps.CountAsync();
            
            await dbContext.Database.ExecuteSqlRawAsync("UPDATE Maps SET AverageLeavePercentage = -1;");
        }

        var batchesRequired = (int)Math.Ceiling((double)totalRows / batchCount);
        var affectedRows = 0;
        
        for (var i = 0; i < batchesRequired; i++)
        {
            await using var dbContext = new BotDbContext();

            affectedRows += await dbContext.Database.ExecuteSqlRawAsync($"UPDATE Maps SET AverageLeavePercentage = (SELECT AVG(PlayerFinishCount * 1.0 / PlayerCount) FROM Games WHERE Games.BeatmapId = Maps.BeatmapId AND PlayerPassedCount != -1 AND PlayerCount > 3 ORDER BY Games.Time DESC LIMIT 20) WHERE BeatmapId IN (SELECT DISTINCT BeatmapId FROM Games WHERE PlayerPassedCount != -1 AND PlayerCount > 3 GROUP BY BeatmapId HAVING COUNT(*) >= 5 ORDER BY MAX(Time) DESC LIMIT {batchCount} OFFSET {batchCount * i});");
            
            Log.Information($"Updating AverageLeavePercentage {i * batchCount}/{totalRows}...");
            
            await Task.Delay(500);
        }
        
        Log.Information($"Updated AverageLeavePercentage on {affectedRows} rows.");
    }
    
    private static async void LoadMaps()
    {
        // Warning: stupid code below!!!
        
        const int commitCount = 1000;
        
        var currentlyLoaded = 0;
        var totalLoaded = 0;
        var totalErrors = 0;
        
        BotDbContext? currentContext = null;

        var totalFiles = Directory.EnumerateFiles("cache").Count();
        foreach (var mapFile in Directory.EnumerateFiles("cache"))
        {
            if (currentContext == null || currentlyLoaded >= commitCount)
            {
                currentlyLoaded = 0;

                if (currentContext != null)
                {
                    await currentContext.SaveChangesAsync();
                    await currentContext.DisposeAsync();
                }

                currentContext = new BotDbContext();
                currentContext.ChangeTracker.AutoDetectChangesEnabled = false;

                Log.Information($"Map Import: Processed {totalLoaded}/{totalFiles}...");
            }

            try
            {
                var map = new Map
                {
                    BeatmapSetId = -1,
                    BeatmapId = long.Parse(mapFile[6..^4]),
                    BeatmapArtist = "N/A" // this can apparently be the case.
                };

                var readLine = false;
                foreach (var line in await File.ReadAllLinesAsync(mapFile))
                {
                    readLine = true;
                    
                    if (line.StartsWith("[HitObjects]"))
                    {
                        // We've gone past stuff we care about.
                        break;
                    }

                    if (line.StartsWith("Title:"))
                    {
                        map.BeatmapName = line[6..];
                        continue;
                    }
                    
                    if (line.StartsWith("Artist:"))
                    {
                        map.BeatmapArtist = line[7..];
                        continue;
                    }
                    
                    if (line.StartsWith("Version:"))
                    {
                        map.DifficultyName = line[8..];
                        continue;
                    }
                    
                    if (line.StartsWith("BeatmapSetID:"))
                    {
                        map.BeatmapSetId = long.Parse(line[13..]);
                        break;
                    }
                }

                if (!readLine)
                {
                    throw new Exception("Missing file data.");
                    continue;
                }
                
                // Check that we have the data we're looking for
                if (map.BeatmapId == 0 || !map.BeatmapName.Any() || !map.BeatmapArtist.Any() || !map.DifficultyName.Any())
                {
                    throw new Exception("Missing data.");
                }

                await currentContext.Maps.AddAsync(map);

                currentlyLoaded++;
                totalLoaded++;
            }
            catch (Exception e)
            {
                Log.Error($"Error processing map {mapFile} during import: {e}");
                totalErrors++;
            }
        }

        if (currentContext == null) return;
        
        await currentContext.SaveChangesAsync();
        await currentContext.DisposeAsync();
        
        Log.Information($"Finished map import, imported {totalLoaded} with {totalErrors} errors.");
    }

    protected override async void OnInitialized()
    {
        using var gameRepo = new GameRepository();
        using var userRepo = new UserRepository();
        using var scoreRepo = new ScoreRepository();

        _userCount = await userRepo.GetUsersCount();
        _gamesCount = await gameRepo.GetGamesCount();
        _scoreCount = await scoreRepo.GetScoreCount();
        
        _configuration = Bot.Configuration;
    }

    public void Dispose()
    {
    }
}