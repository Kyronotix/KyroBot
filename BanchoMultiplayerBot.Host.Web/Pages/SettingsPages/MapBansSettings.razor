@implements IDisposable
@inject IDialogService DialogService
@page "/settings/map-bans"
@using BanchoMultiplayerBot.Database.Models
@using BanchoMultiplayerBot.Database.Repositories
@using BanchoMultiplayerBot.Host.Web.Pages.Dialogs

<PageTitle>Map Bans</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Map Bans</MudText>

<MudForm @ref="_form">
    <MudTable Class="pa-0 ma-2" Items="@_mapBans" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col style="width: 50%;"/>
            <col style="width: 40px;"/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Map Set Id</MudTh>
            <MudTh>Map Id</MudTh>
            <MudTh>Options</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Map Set Id">@(context.BeatmapSetId?.ToString() ?? "N/A")</MudTd>
            <MudTd DataLabel="Map Id">@(context.BeatmapId?.ToString() ?? "N/A")</MudTd>
            <MudTd DataLabel="Options">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Remove" OnClick="(() => RemoveBan(context))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudPaper Class="pa-4 ma-2">
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddBan">Add New</MudButton>
    </MudPaper>
</MudForm>

@code {
    private readonly DialogOptions _maxWidthOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private MudForm? _form;
    private List<MapBan>? _mapBans;

    protected override async void OnInitialized()
    {
        await UpdateMapBans();
    }

    private async Task UpdateMapBans()
    {
        using var mapBanRepository = new MapBanRepository();

        _mapBans = (await mapBanRepository.GetAll()).ToList();
    }

    private async void AddBan()
    {
        var mapBan = new MapBan();

        var parameters = new DialogParameters { ["MapBan"] = mapBan };

        var dialog = DialogService.Show<AddMapBanDialog>("AddMapBan", parameters, _maxWidthOptions);
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }

        if (mapBan.BeatmapId == null &&
            mapBan.BeatmapSetId == null)
        {
            return;
        }

        using var mapBanRepository = new MapBanRepository();

        await mapBanRepository.AddMapBan(mapBan.BeatmapSetId, mapBan.BeatmapId);
        await mapBanRepository.Save();
        await UpdateMapBans();
        
        // Force update the page in case Blazor doesn't update automatically
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async void RemoveBan(MapBan mapBan)
    {
        using var mapBanRepository = new MapBanRepository();

        await mapBanRepository.RemoveAsync(mapBan);
        await mapBanRepository.Save();
        
        await UpdateMapBans();
        
        // Force update the page in case Blazor doesn't update automatically
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    public void Dispose()
    {
    }

}