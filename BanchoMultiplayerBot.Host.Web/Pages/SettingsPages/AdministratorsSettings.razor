@implements IDisposable
@inject BotService Bot
@inject IDialogService DialogService
@page "/settings/admins"
@using BanchoMultiplayerBot.Database
@using BanchoMultiplayerBot.Database.Models
@using BanchoMultiplayerBot.Database.Repositories
@using BanchoMultiplayerBot.Host.Web.Pages.Dialogs;
@using Microsoft.EntityFrameworkCore

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Administrators</MudText>

<MudForm @ref="_form">
    <MudTable Class="pa-0 ma-2" Items="@_administrators" T="User" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col style="width: 70%;"/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Options</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Options">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Remove" OnClick="(() => OnRemoveEntryPressed(context))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudPaper Class="pa-4 ma-2">
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@OnAddAdministratorPressed">Add New</MudButton>
    </MudPaper>
</MudForm>

@code {
    private MudForm? _form;
    private DialogOptions _maxWidthOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private List<User> _administrators = new();

    private async Task OnRemoveEntryPressed(User entry)
    {
        var parameters = new DialogParameters { ["Message"] = $"Are you sure you want to remove {entry.Name} as an administrator?" };
        var dialog = DialogService.Show<ConfirmDialog>("ConfirmDialog", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        using var userRepository = new UserRepository();
        var userEntity = await userRepository.FindUser(entry.Name);

        if (userEntity == null)
            return;

        userEntity.Administrator = false;

        await userRepository.Save();
        await LoadAdministrators();
    }

    private async Task OnAddAdministratorPressed()
    {
        var dialog = DialogService.Show<AddAdministratorDialog>("NewAdministrator", _maxWidthOptions);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        var userName = (result.Data as string)!;

        using var userRepository = new UserRepository();
        var user = await userRepository.FindUser(userName) ?? await userRepository.CreateUser(userName);

        user.Administrator = true;

        await userRepository.Save();
        await LoadAdministrators();
    }

    private async Task LoadAdministrators()
    {
        await using var context = new BotDbContext();

        _administrators = await context.Users
            .Where(x => x.Administrator)
            .AsNoTracking()
            .ToListAsync();
    }

    protected override async void OnInitialized()
    {
        await LoadAdministrators();
    }

    public void Dispose()
    {
    }

}