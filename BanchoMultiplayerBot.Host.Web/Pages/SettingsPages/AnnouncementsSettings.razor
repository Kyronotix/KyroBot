@implements IDisposable
@inject BotService Bot
@inject IDialogService DialogService
@page "/settings/announcements"
@using BanchoMultiplayerBot
@using BanchoMultiplayerBot.Config
@using BanchoMultiplayerBot.Data
@using BanchoMultiplayerBot.Host.Web.Pages.Dialogs;

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Announcements</MudText>

<MudForm @ref="_form">
    <MudPaper Class="pa-8 ma-2">
        <MudText Typo="Typo.h6" GutterBottom="true">Announcements</MudText>
        <MudTable Class="pa-0 ma-2" Items="@Bot.AnnouncementManager.Announcements" Hover="true" Breakpoint="Breakpoint.Sm">
            <ColGroup>
                <col style="width: 50%;" />
                <col style="width: 40px;" />
                <col style="width: 120px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Message</MudTh>
                <MudTh>Frequency</MudTh>
                <MudTh>Options</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Message">@context.Message</MudTd>
                <MudTd DataLabel="Frquency">@context.Frequency</MudTd>
                <MudTd DataLabel="Options"><MudIconButton Icon="@Icons.Material.Filled.Settings" Title="Configure" OnClick="(() => OnConfigureAnnouncementPressed(context))" /><MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Remove" OnClick="(() => OnRemoveAnnouncementPressed(context))" /></MudTd>
            </RowTemplate>
        </MudTable>
        <MudPaper Class="pa-0 ma-2" Elevation="0">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@OnAddAnnouncementPressed">Add New</MudButton>
        </MudPaper>
    </MudPaper>
</MudForm>

@code {
    private MudForm? _form;
    private BotConfiguration _configuration = null!;

    private DialogOptions _maxWidthOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private async Task OnConfigureAnnouncementPressed(Announcement announcement)
    {
        var announcementCopy = new Announcement()
            {
                Message = announcement.Message,
                Frequency = announcement.Frequency,
            };

        var parameters = new DialogParameters { ["Announcement"] = announcementCopy };

        var dialog = DialogService.Show<CreateConfigureAnnouncement>("ConfigureAnnouncement", parameters, _maxWidthOptions);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        announcement.Message = announcementCopy.Message;
        announcement.Frequency = announcementCopy.Frequency;
    }

    private void OnRemoveAnnouncementPressed(Announcement announcement)
    {
        Bot.AnnouncementManager.Announcements.Remove(announcement);
    }

    private async Task OnAddAnnouncementPressed()
    {
        var newAnnouncement = new Announcement();

        var parameters = new DialogParameters { ["Announcement"] = newAnnouncement };

        var dialog = DialogService.Show<CreateConfigureAnnouncement>("NewAnnouncement", parameters, _maxWidthOptions);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        newAnnouncement.LastSent = DateTime.Now;

        Bot.AnnouncementManager.Announcements.Add(newAnnouncement);
    }

    protected override void OnInitialized()
    {
        _configuration = Bot.Configuration;
    }

    public void Dispose()
    {
    }
}